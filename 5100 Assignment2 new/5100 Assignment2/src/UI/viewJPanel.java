/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;


import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Product;
import model.ProductCatalog;
import UI.TimeUtil;
import java.util.stream.Collectors;

/**
 *
 * @author chen.wei
 */
public class viewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form viewJPanel
     */
    ProductCatalog catalog;
    private JPanel workArea;
    private TimeUtil tu = new TimeUtil();
    public viewJPanel(JPanel workArea,ProductCatalog catalog) {
        initComponents();
        this.workArea = workArea;
        this.catalog = catalog;
        txtShowAvailableNumber.setText(String.valueOf(catalog.getCatalog().stream().filter(s -> s.isIsAvailable() == true).collect(Collectors.toList()).size()));
        txtNotAvailable.setText(String.valueOf(catalog.getCatalog().stream().filter(s -> s.isIsAvailable() == false).collect(Collectors.toList()).size()));
        populateCombo();
        populateComCity();
        populateTable();
        //System.out.println(tu.getTime());
        txtTime.setText(tu.getTime());
        
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table1 = new javax.swing.JTable();
        btnView = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lbBrands = new javax.swing.JLabel();
        comBrands = new javax.swing.JComboBox<>();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnShowExpired = new javax.swing.JButton();
        btnShowAvailable1 = new javax.swing.JButton();
        lbshow = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnShowManufacturers = new javax.swing.JButton();
        lbTime = new javax.swing.JLabel();
        lbSearchBySeats = new javax.swing.JLabel();
        txtMinSeat = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtMaxSeat = new javax.swing.JTextField();
        btnSearchSeats = new javax.swing.JButton();
        lbCity = new javax.swing.JLabel();
        comCity = new javax.swing.JComboBox<>();
        txtTime = new javax.swing.JLabel();
        txtShowAvailableNumber = new javax.swing.JLabel();
        txtNotAvailable = new javax.swing.JLabel();

        setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        setSize(new java.awt.Dimension(800, 700));

        lbTitle.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        lbTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbTitle.setText("View");

        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Brands", "Serial number", "Model number", "Produce year", "Seat number", "City", "Manufactruers", "Is Available", "Is Expired"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table1);

        btnView.setText("View details");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lbBrands.setText("select blands");

        comBrands.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comBrandsItemStateChanged(evt);
            }
        });
        comBrands.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comBrandsActionPerformed(evt);
            }
        });

        btnSearch.setText("Search ");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnShowExpired.setText("Show Expired");
        btnShowExpired.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowExpiredActionPerformed(evt);
            }
        });

        btnShowAvailable1.setText("Show Available");
        btnShowAvailable1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowAvailable1ActionPerformed(evt);
            }
        });

        lbshow.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbshow.setText("cars available");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("cars not available");

        btnShowManufacturers.setText("Show Manufacturers");
        btnShowManufacturers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowManufacturersActionPerformed(evt);
            }
        });

        lbTime.setText("Last update time:");

        lbSearchBySeats.setText("Seat number: min");

        jLabel1.setText("max:");

        txtMaxSeat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaxSeatActionPerformed(evt);
            }
        });

        btnSearchSeats.setText("Search");
        btnSearchSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchSeatsActionPerformed(evt);
            }
        });

        lbCity.setText("Cars Available in ");

        comCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comCityActionPerformed(evt);
            }
        });

        txtShowAvailableNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        txtNotAvailable.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 787, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbSearchBySeats)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMinSeat, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMaxSeat, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearchSeats)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbCity)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15))
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lbBrands)
                .addGap(18, 18, 18)
                .addComponent(comBrands, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtShowAvailableNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbshow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtNotAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearch)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(btnShowAvailable1)
                .addGap(18, 18, 18)
                .addComponent(btnShowExpired)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnShowManufacturers)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnView)
                .addGap(15, 15, 15)
                .addComponent(btnDelete)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lbTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbBrands)
                            .addComponent(comBrands, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txtShowAvailableNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbshow, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtNotAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnSearch)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnView)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnShowAvailable1)
                        .addComponent(btnShowExpired)
                        .addComponent(btnShowManufacturers))
                    .addComponent(btnDelete))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbSearchBySeats)
                            .addComponent(txtMinSeat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(txtMaxSeat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearchSeats))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbCity)
                            .addComponent(comCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(94, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbTime)
                            .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = table1.getSelectedRow();
        if(selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "please select the row to delete");
            return;
        }else{
            DefaultTableModel model = (DefaultTableModel)table1.getModel();
            Product selectedP = (Product)model.getValueAt(selectedRowIndex, 0);
            catalog.deleteProduct(selectedP);
            JOptionPane.showMessageDialog(this, "product deleted");
            populateTable();
            
        } 
        txtShowAvailableNumber.setText(String.valueOf(catalog.getCatalog().stream().filter(s -> s.isIsAvailable() == true).collect(Collectors.toList()).size()));
        txtNotAvailable.setText(String.valueOf(catalog.getCatalog().stream().filter(s -> s.isIsAvailable() == false).collect(Collectors.toList()).size()));
        txtTime.setText(tu.getTime());
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void comBrandsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comBrandsActionPerformed
        // TODO add your handling code here:
        //comBrands.setSelectedItem(null);
       // populateCombo();
       // for(String )
       
        populateProductTable();
        
        
        
    }//GEN-LAST:event_comBrandsActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String txtInfo = txtSearch.getText();
        if(txtInfo == null || txtInfo.equals("") ) {
            //System.out.print("123");
            populateTable();
            //System.out.print("12344");
        }else{
            populateProductTable(txtInfo);
        }
        
    }//GEN-LAST:event_btnSearchActionPerformed
   
    private void btnShowExpiredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowExpiredActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model1 = (DefaultTableModel)table1.getModel();
        model1.setRowCount(0);
        for(Product p: catalog.getExpiredCars()){
            Object[] row = new Object[9];
            row[0] = p;
            row[1] = p.getSerialNumber();
            row[2] = p.getModelNumber();
            row[3] = p.getProduceYear();
            row[4] = p.getSeatNumbers();
            row[5] = p.getCity();
            row[6] = p.getManufacturers();
            if(p.isIsAvailable() == true){
                row[7] = "Yes";
            }else{
                row[7] = "No";
            }
            if(p.isIsExpired() == true){
                row[8] = "Yes";
            }else{
                row[8] = "No";
            }
         
            model1.addRow(row);
        }
    }//GEN-LAST:event_btnShowExpiredActionPerformed

    private void btnShowAvailable1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowAvailable1ActionPerformed
        
        DefaultTableModel model1 = (DefaultTableModel)table1.getModel();
        model1.setRowCount(0);
        for(Product p: catalog.getAvailableCars()){
            Object[] row = new Object[9];
            row[0] = p;
            row[1] = p.getSerialNumber();
            row[2] = p.getModelNumber();
            row[3] = p.getProduceYear();
            row[4] = p.getSeatNumbers();
            row[5] = p.getCity();
            row[6] = p.getManufacturers();
            if(p.isIsAvailable() == true){
                row[7] = "Yes";
            }else{
                row[7] = "No";
            }
            if(p.isIsExpired() == true){
                row[8] = "Yes";
            }else{
                row[8] = "No";
            }
         
            model1.addRow(row);
        }
        //txtShowAvailableNumber.setText(String.valueOf(catalog.getAvailableCars().size()));
    }//GEN-LAST:event_btnShowAvailable1ActionPerformed

    private void comBrandsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comBrandsItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_comBrandsItemStateChanged

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = table1.getSelectedRow();
        if(selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "please select the row to view");
            return;
        }
      
        Product product = (Product) table1.getValueAt(selectedRowIndex, 0);
        
        viewDetailsJPanel vdjp = new viewDetailsJPanel(workArea,product);
       
        workArea.add("viewDetailsJPanel",vdjp);
        
        CardLayout layout = (CardLayout)workArea.getLayout();
        
        layout.next(workArea);
        txtTime.setText(tu.getTime());
       
        
        
       
       
            
        
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnShowManufacturersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowManufacturersActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)table1.getModel();
        model.setRowCount(0);
        for(String p:catalog.getAllManufacturers()){
            //System.out.println(p.getSerialNumber());
            Object[] row = new Object[1];
            row[0] = p;
            
            model.addRow(row);
        }
    }//GEN-LAST:event_btnShowManufacturersActionPerformed

    private void txtMaxSeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaxSeatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaxSeatActionPerformed

    private void btnSearchSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchSeatsActionPerformed
        // TODO add your handling code here:
        String min = txtMinSeat.getText();
        String max = txtMaxSeat.getText();
        if(min == null || min.equals("")|| max == null ||max.equals("") ){
          populateTable();  
        }else{
            DefaultTableModel model1 = (DefaultTableModel)table1.getModel();
        model1.setRowCount(0);
        for(Product p: catalog.getCarsBySeats(Integer.parseInt(min), Integer.parseInt(max))){
            Object[] row = new Object[9];
            row[0] = p;
            row[1] = p.getSerialNumber();
            row[2] = p.getModelNumber();
            row[3] = p.getProduceYear();
            row[4] = p.getSeatNumbers();
            row[5] = p.getCity();
            row[6] = p.getManufacturers();
            if(p.isIsAvailable() == true){
                row[7] = "Yes";
            }else{
                row[7] = "No";
            }
            if(p.isIsExpired() == true){
                row[8] = "Yes";
            }else{
                row[8] = "No";
            }
         
            model1.addRow(row);
        }
            
        }
    }//GEN-LAST:event_btnSearchSeatsActionPerformed

    private void comCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comCityActionPerformed
        // TODO add your handling code here:
        populateProductTable1();
    }//GEN-LAST:event_comCityActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearchSeats;
    private javax.swing.JButton btnShowAvailable1;
    private javax.swing.JButton btnShowExpired;
    private javax.swing.JButton btnShowManufacturers;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox<String> comBrands;
    private javax.swing.JComboBox<String> comCity;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbBrands;
    private javax.swing.JLabel lbCity;
    private javax.swing.JLabel lbSearchBySeats;
    private javax.swing.JLabel lbTime;
    private javax.swing.JLabel lbTitle;
    private javax.swing.JLabel lbshow;
    private javax.swing.JTable table1;
    private javax.swing.JTextField txtMaxSeat;
    private javax.swing.JTextField txtMinSeat;
    private javax.swing.JLabel txtNotAvailable;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JLabel txtShowAvailableNumber;
    private javax.swing.JLabel txtTime;
    // End of variables declaration//GEN-END:variables
    public void refreshTable() {
    DefaultTableModel model = (DefaultTableModel)table1.getModel();
        model.setRowCount(0);
        for(Product p:catalog.getCatalog()){
            //System.out.println(p.getSerialNumber());
            Object[] row = new Object[9];
            row[0] = p;
            row[1] = p.getSerialNumber();
            row[2] = p.getModelNumber();
            row[3] = p.getProduceYear();
            row[4] = p.getSeatNumbers();
            row[5] = p.getCity();
            row[6] = p.getManufacturers();
            if(p.isIsAvailable() == true){
                row[7] = "Yes";
            }else{
                row[7] = "No";
            }
            if(p.isIsExpired() == true){
                row[8] = "Yes";
            }else{
                row[8] = "No";
            }
         
            model.addRow(row);
        }
    }
    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel)table1.getModel();
        model.setRowCount(0);
        for(Product p:catalog.getCatalog()){
            //System.out.println(p.getSerialNumber());
            Object[] row = new Object[9];
            row[0] = p;
            row[1] = p.getSerialNumber();
            row[2] = p.getModelNumber();
            row[3] = p.getProduceYear();
            row[4] = p.getSeatNumbers();
            row[5] = p.getCity();
            row[6] = p.getManufacturers();
            if(p.isIsAvailable() == true){
                row[7] = "Yes";
            }else{
                row[7] = "No";
            }
            if(p.isIsExpired() == true){
                row[8] = "Yes";
            }else{
                row[8] = "No";
            }
         
            model.addRow(row);
        }
    }
    private void populateComCity() {
        comCity.removeAllItems();
        for(String s : catalog.getAllCities()){
            comCity.addItem(s);
        }
    }
    private void populateCombo() {
        comBrands.removeAllItems();
        for(String pc : catalog.getALlBrands()){
            comBrands.addItem(pc);
        }
       
         
             
    
    }
    private void populateProductTable() {
       String selectedBrand = String.valueOf(comBrands.getSelectedItem());
        DefaultTableModel model1 = (DefaultTableModel)table1.getModel();
        model1.setRowCount(0);
        for(Product p: catalog.getBlandsList(selectedBrand)){
            //System.out.println(p.getSerialNumber());
     
            Object[] row = new Object[9];
            row[0] = p;
            row[1] = p.getSerialNumber();
            row[2] = p.getModelNumber();
            row[3] = p.getProduceYear();
            row[4] = p.getSeatNumbers();
            row[5] = p.getCity();
            row[6] = p.getManufacturers();
            if(p.isIsAvailable() == true){
                row[7] = "Yes";
            }else{
                row[7] = "No";
            }
            if(p.isIsExpired() == true){
                row[8] = "Yes";
            }else{
                row[8] = "No";
            }
         
            model1.addRow(row);
        }
        
      
    }
    private void populateProductTable1() {
       String selectedCity = String.valueOf(comCity.getSelectedItem());
        DefaultTableModel model1 = (DefaultTableModel)table1.getModel();
        model1.setRowCount(0);
        for(Product p: catalog.getAvailableCityList(selectedCity)){
            //System.out.println(p.getSerialNumber());
     
            Object[] row = new Object[9];
            row[0] = p;
            row[1] = p.getSerialNumber();
            row[2] = p.getModelNumber();
            row[3] = p.getProduceYear();
            row[4] = p.getSeatNumbers();
            row[5] = p.getCity();
            row[6] = p.getManufacturers();
            if(p.isIsAvailable() == true){
                row[7] = "Yes";
            }else{
                row[7] = "No";
            }
            if(p.isIsExpired() == true){
                row[8] = "Yes";
            }else{
                row[8] = "No";
            }
         
            model1.addRow(row);
        }
        
      
    }
    private void populateProductTable(String keyword) {
        
        DefaultTableModel model1 = (DefaultTableModel)table1.getModel();
        model1.setRowCount(0);
        for(Product p: catalog.getCatalog()){
            if(p.getSerialNumber().equalsIgnoreCase(keyword)){
            Object[] row = new Object[9];
            row[0] = p;
            row[1] = p.getSerialNumber();
            row[2] = p.getModelNumber();
            row[3] = p.getProduceYear();
            row[4] = p.getSeatNumbers();
            row[5] = p.getCity();
            row[6] = p.getManufacturers();
            if(p.isIsAvailable() == true){
                row[7] = "Yes";
            }else{
                row[7] = "No";
            }
            if(p.isIsExpired() == true){
                row[8] = "Yes";
            }else{
                row[8] = "No";
            }
         
            model1.addRow(row);
        }
             if(p.getProduceYear().equalsIgnoreCase(keyword)){
            Object[] row = new Object[9];
            row[0] = p;
            row[1] = p.getSerialNumber();
            row[2] = p.getModelNumber();
            row[3] = p.getProduceYear();
            row[4] = p.getSeatNumbers();
            row[5] = p.getCity();
            row[6] = p.getManufacturers();
            if(p.isIsAvailable() == true){
                row[7] = "Yes";
            }else{
                row[7] = "No";
            }
            if(p.isIsExpired() == true){
                row[8] = "Yes";
            }else{
                row[8] = "No";
            }
         
            model1.addRow(row);
        }
              if(p.getCity().equalsIgnoreCase(keyword)){
            Object[] row = new Object[9];
            row[0] = p;
            row[1] = p.getSerialNumber();
            row[2] = p.getModelNumber();
            row[3] = p.getProduceYear();
            row[4] = p.getSeatNumbers();
            row[5] = p.getCity();
            row[6] = p.getManufacturers();
            if(p.isIsAvailable() == true){
                row[7] = "Yes";
            }else{
                row[7] = "No";
            }
            if(p.isIsExpired() == true){
                row[8] = "Yes";
            }else{
                row[8] = "No";
            }
         
            model1.addRow(row);
        }
               if(p.getBrands().equalsIgnoreCase(keyword)){
            Object[] row = new Object[9];
            row[0] = p;
            row[1] = p.getSerialNumber();
            row[2] = p.getModelNumber();
            row[3] = p.getProduceYear();
            row[4] = p.getSeatNumbers();
            row[5] = p.getCity();
            row[6] = p.getManufacturers();
            if(p.isIsAvailable() == true){
                row[7] = "Yes";
            }else{
                row[7] = "No";
            }
            if(p.isIsExpired() == true){
                row[8] = "Yes";
            }else{
                row[8] = "No";
            }
         
            model1.addRow(row);
        }
        }
        
     
    }

    
}
